package com.nightinagle.hl7.serviceImpl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.nightinagle.hl7.util.HL7Util;
import com.nightingale.hl7.daoBeans.DBDataBean;
import com.nightingale.hl7.daoBeans.PatientAddress;
import com.nightingale.hl7.daoBeans.PatientCommunication;
import com.nightingale.hl7.daoBeans.RaceInfo;
import com.nightingale.hl7.dto.Address;
import com.nightingale.hl7.dto.AdministrationNotes;
import com.nightingale.hl7.dto.HL7Bean;
import com.nightingale.hl7.dto.MSHBean;
import com.nightingale.hl7.dto.ManufecturerName;
import com.nightingale.hl7.dto.NK1Bean;
import com.nightingale.hl7.dto.Name;
import com.nightingale.hl7.dto.OBXBean;
import com.nightingale.hl7.dto.ORCBean;
import com.nightingale.hl7.dto.OrderBean;
import com.nightingale.hl7.dto.PD1Bean;
import com.nightingale.hl7.dto.PIDBean;
import com.nightingale.hl7.dto.PatientIdentifier;
import com.nightingale.hl7.dto.PatientInformation;
import com.nightingale.hl7.dto.Phone;
import com.nightingale.hl7.dto.RXABean;
import com.nightingale.hl7.dto.RXRBean;
import com.nightingale.hl7.dto.Race;

public class Hl7BeanMapper {

	private SimpleDateFormat sdf = new SimpleDateFormat("YYYYMMdd");

	public HL7Bean mapToHL7Bean(DBDataBean dataBean) {
		
		HL7Bean hl7Bean = new HL7Bean();

		MSHBean mshBean = populateMSHBean(dataBean);
		hl7Bean.setMshBean(mshBean);

		PIDBean pidBean = populatePIDBean(dataBean);
		hl7Bean.setPidBean(pidBean);

		PD1Bean pd1Bean = populatePD1Bean(dataBean);
		hl7Bean.setPd1Bean(pd1Bean);

		List<NK1Bean> nk1BeanList = populateNK1Bean(dataBean);
		hl7Bean.setNk1BeanList(nk1BeanList);

		List<OrderBean> orderBeanList = populateOderBeanList(dataBean);
		hl7Bean.setOrderBeanList(orderBeanList);

		return hl7Bean;
	}

	private List<OrderBean> populateOderBeanList(DBDataBean dataBean) {

		List<OrderBean> orderBeanList = new ArrayList<OrderBean>();

		OrderBean orderBean = new OrderBean();

		ORCBean orcBean = populateORCBean(dataBean);
		orderBean.setOrcBean(orcBean);

		RXABean rxaBean = populateRXABean(dataBean);
		orderBean.setRxaBean(rxaBean);

		RXRBean rxrBean = populateRXRBean(dataBean);
		orderBean.setRxrBean(rxrBean);

		List<OBXBean> obxBeanList = populateOBXBean(dataBean);
		orderBean.setObxBeanList(obxBeanList);

		orderBeanList.add(orderBean);

		return orderBeanList;
	}

	private MSHBean populateMSHBean(DBDataBean dataBean) {

		MSHBean mshBean = new MSHBean();
		mshBean.setSendingAppNamespaceId("Nexia EHR");
		mshBean.setSendingFacilityNamespaceId("X68");
		mshBean.setReceivingFaclityNamespaceId("NIST Test Iz Reg");
		mshBean.setDateTimeOfMessage("201207010822");
		mshBean.setMessageControlId("NIST-IXZ-TC-VXU-XXX.XX");
		mshBean.setProcessingId("P");
		mshBean.setAcceptAckType("AL");
		mshBean.setAppAckType("ER");

		return mshBean;
	}

	private PIDBean populatePIDBean(DBDataBean dataBean) {

		PIDBean pidBean = new PIDBean();

		// TODO: Bean Mapping should be moved to another method or class
		PatientIdentifier patientIdentifier = new PatientIdentifier();
		patientIdentifier.setIdNumber(String.valueOf(dataBean
				.getPatientInformation().getPatientId()));
		patientIdentifier.setAssignAuthNamespaceId("NIST MPI");
		patientIdentifier.setIdentifierTypeCode("MR");

		pidBean.addPatientIdentifier(patientIdentifier);
		//Second patient identifier
		patientIdentifier = new PatientIdentifier();
		patientIdentifier.setIdNumber(String.valueOf(dataBean
				.getPatientInformation().getPatientId()));
		patientIdentifier.setAssignAuthNamespaceId("NIST MPI");
		patientIdentifier.setIdentifierTypeCode("SS");

		pidBean.addPatientIdentifier(patientIdentifier);

		Name name = new Name();
		name.setSurname(dataBean.getPatientInformation().getLastName());
		name.setGivenName(dataBean.getPatientInformation().getFirstName());
		name.setSecondNameOrInitial(dataBean.getPatientInformation().getMi());
		name.setNameTypeCode("L");

		pidBean.addPatientName(name);
		pidBean.setMotherSurname("Lam");
		pidBean.setMotherGivenName("Morgan");
		pidBean.setAdministrativeSex("F");
		/**
		 * Test tool only accepting the test case data for test-case-fixed item.
		 */
		// pidBean.setAdministrativeSex(patientInformation.getSex());
		String dob = sdf.format(dataBean.getPatientInformation().getDob());
		pidBean.setDateOfBirth(dob);

		for (RaceInfo raceInfo : dataBean.getRaceInfoList()) {
			Race race = new Race();
			race.setText(HL7Util.getRaceDescription(raceInfo.getRace()));
			race.setIdentifier("2076-8");//HL7Util.getRaceIdentifier(raceInfo.getRace()));
			pidBean.addRace(race);
		}

		for (PatientAddress patientAddress : dataBean.getPatientAddressList()) {
			System.out.println("Populating address >>>>>>>>>>>>>>");
			Address address = new Address();
			address.setStreetAddress(patientAddress.getAddr1()
					+ patientAddress.getAddr2());
			address.setCity(patientAddress.getCity());
			address.setState(patientAddress.getState());
			address.setCountry(patientAddress.getCountry());
			address.setZip(patientAddress.getZip());
			address.setAddressType("L");
			// address type is missing in DB
			// address.setAddressType(String.valueOf(patientAddress.getTypecode()));
			pidBean.addPatientAddress(address);
		}

		for (PatientCommunication contact : dataBean.getContactList()) {
			System.out.println(">>>>>>>>>get contact info >>>>>>>>>");
			Phone phone = new Phone();
			pidBean.addPatientPhone(phone);
			phone = new Phone();
			phone.setTelecomUseCode("NET");
//			phone.setTelecomEquipType("PH");
			
			// Need to uncomment when value populated from database
			/*if("NET".equalsIgnoreCase(String.valueOf(contact.getTypecode()))) {
				phone.setEmailAdd("nvally@fastmail.com");
			}*/
			//else{
				// need to remove when condition apply
				phone.setEmailAdd("nvally@fastmail.com");
				
//				phone.setAreaOrCityCode(contact.getExtnum());
//				phone.setLocalNumber(contact.getTelnum());
			//}
			pidBean.addPatientPhone(phone);
		}

		// Need to comment if data exist in the DB
		/*
		 * Phone phone = new Phone(); phone.setTelecomUseCode("PRN");
		 * phone.setTelecomEquipType("PH"); phone.setAreaOrCityCode("657");
		 * phone.setLocalNumber("5558563"); pidBean.addPatientPhone(phone);
		 */

		pidBean.setEthnicGrpIdentifier("2186-5");
		pidBean.setEthnicGrpText("non Hispanic or Latino");

		return pidBean;
	}

	private PD1Bean populatePD1Bean(DBDataBean dataBean) {

		PD1Bean pd1Bean = new PD1Bean();
		pd1Bean.setPublicityCodeIdentifier("02");
		pd1Bean.setPublicityCodeText("Reminder/Recall - any method");
		pd1Bean.setImmunizationRegStatus("A");
		Date date = dataBean.getPatientImmunizations().get(0)
				.getAdministrationdate();
		String adminDate = sdf.format(date);
		pd1Bean.setImmunizationRegStatusEffectiveDate(adminDate);
		pd1Bean.setPublicityCodeEffectiveDate(adminDate);

		return pd1Bean;
	}

	private List<NK1Bean> populateNK1Bean(DBDataBean dataBean) {
		
		List<NK1Bean> nk1BeanList = new ArrayList<NK1Bean>();
		
		if((dataBean.getKinInformationList() != null) && (dataBean.getKinInformationList().size() != 0)){
		
			NK1Bean nk1Bean = new NK1Bean();
			List<Name> nameList = new ArrayList<Name>();
			
			for(PatientInformation kinInfo : dataBean.getKinInformationList()){
				
				Name name = new Name();
				name.setGivenName(kinInfo.getFirstName());
				name.setNameTypeCode("L");
				name.setSurname(kinInfo.getLastName());
				nameList.add(name);
			}
			
			nk1Bean.setNk1Id("1");
			nk1Bean.setRelationshipIdentifier("MTH");
			nk1Bean.setRelationshipText("Mother");
			nk1Bean.setKinNameList(nameList);
			
			List<Address> addressList = new ArrayList<Address>();
			
			for(PatientAddress kinAddress : dataBean.getKinAddressList()) {
				
				Address address = new Address();
				address.setAddressType("L");
				address.setCity(kinAddress.getCity());
				address.setCountry(kinAddress.getCountry());
				address.setState(kinAddress.getState());
				address.setStreetAddress(kinAddress.getAddr1());
				address.setZip(kinAddress.getZip());
				addressList.add(address);
			}
				nk1Bean.setAddressList(addressList);
				
			List<Phone> phoneList = new ArrayList<Phone>();
			
			for(PatientCommunication kinContact : dataBean.getKinContactList()) {
				
				Phone phone = new Phone();
				phone.setTelecomUseCode("PRN");
				phone.setTelecomEquipType("PH");
				phone.setAreaOrCityCode(kinContact.getExtnum());
				phone.setLocalNumber(kinContact.getTelnum());
				phoneList.add(phone);
			}
				nk1Bean.setPhoneList(phoneList);
				nk1BeanList.add(nk1Bean);
		}

		/*List<NK1Bean> nk1BeanList = new ArrayList<NK1Bean>();
		NK1Bean nk1Bean = new NK1Bean();

		List<Name> nameList = new ArrayList<Name>();
		Name name = new Name();
		name.setGivenName("Morgan");
		name.setNameTypeCode("L");
		name.setSurname("Lam");
		nameList.add(name);
		nk1Bean.setKinNameList(nameList);
		nk1Bean.setNk1Id("1");
		nk1Bean.setRelationshipIdentifier("MTH");
		nk1Bean.setRelationshipText("Mother");

		List<Address> addressList = new ArrayList<Address>();
		Address address = new Address();
		address.setAddressType("L");
		address.setCity("Warwick");
		address.setCountry("USA");
		address.setState("MA");
		address.setStreetAddress("32 Prescott Street Ave");
		address.setZip("02452");
		addressList.add(address);

		nk1Bean.setAddressList(addressList);

		List<Phone> phoneList = new ArrayList<Phone>();
		Phone phone = new Phone();
		phone.setTelecomUseCode("PRN");
		phone.setTelecomEquipType("PH");
		phone.setAreaOrCityCode("657");
		phone.setLocalNumber("5558563");
		phoneList.add(phone);

		nk1Bean.setPhoneList(phoneList);

		nk1BeanList.add(nk1Bean);*/

		return nk1BeanList;
	}

	private ORCBean populateORCBean(DBDataBean dataBean) {

		ORCBean orcBean = new ORCBean();

		orcBean.setFillerOrderEntityIdentifier("IZ-783274");
		orcBean.setFillerOrderNamespaceId("NDA");
		orcBean.setEnteredByIdNumber("I-23432");
		orcBean.setEnteredBySurname("Burden");
		orcBean.setEnteredByGivenName("Donna");
		orcBean.setEnteredByInitial("A");
		orcBean.setEnteredByNamespaceId("NIST-AA-1");
		orcBean.setOrderingProvIdNumber("57422");
		orcBean.setOrderingProvSurname("RADON");
		orcBean.setOrderingProvGivenName("NICHOLAS");
		orcBean.setOrderingProvNamespaceId("NIST-AA-1");
		orcBean.setNameTypeCode("L");

		return orcBean;
	}

	private RXABean populateRXABean(DBDataBean dataBean) {

		RXABean rxaBean = new RXABean();

		rxaBean.setAdminstrationStartDateTime("20120814");
		rxaBean.setAdminsteredCodeIdentifier("52");
		rxaBean.setAdminsteredCodeText("Influenza, seasonal, injectable, preservative free");
		rxaBean.setAdminsteredAmt("1");
		rxaBean.setAdminsteredUnitIdentifier("mL");
		rxaBean.setAdminsteredUnitText("MilliLiter [SI Volume Units]");
		rxaBean.setAdminsteredUnitNCS("UCUM");

		List<AdministrationNotes> administrationNoteList = new ArrayList<AdministrationNotes>();
		AdministrationNotes administrationNotes = new AdministrationNotes();
		administrationNotes.setIdentifier("00");
		administrationNotes.setText("New immunization record");
		administrationNoteList.add(administrationNotes);

		rxaBean.setAdministrationNoteList(administrationNoteList);
		rxaBean.setAdminProvIdNumber("7832-1");
		rxaBean.setAdminProvSurname("Lemon");
		rxaBean.setAdminProvInitial("A");
		rxaBean.setAdminProvGivenName("Mike");
		rxaBean.setAdminProvNamespaceId("NIST-AA-1");
		rxaBean.setAdminAtNamespaceId("X68");

		List<String> lotNumberList = new ArrayList<String>();
		lotNumberList.add("I90FV");

		rxaBean.setLotNumberList(lotNumberList);
		rxaBean.setExpirationDate("20121104");

		List<ManufecturerName> manufecturerNameList = new ArrayList<ManufecturerName>();
		ManufecturerName name = new ManufecturerName();
		name.setIdentifier("MSD");
		name.setText("CSL Behring");
		manufecturerNameList.add(name);

		rxaBean.setManufecturerNameList(manufecturerNameList);
		rxaBean.setCompletionStatus("CP");
		rxaBean.setActionCode("A");

		return rxaBean;
	}

	private RXRBean populateRXRBean(DBDataBean dataBean) {

		RXRBean rxrBean = new RXRBean();
		rxrBean.setRouteIdentifier("C28161");
		rxrBean.setRouteText("Intramuscular");
		rxrBean.setAdminSiteIdentifier("RA");
		rxrBean.setAdminSiteText("Left Arm");
		rxrBean.setAdminSiteNCS("HL70163");

		return rxrBean;
	}
	
	private List<OBXBean> populateOBXBean(DBDataBean dataBean) {

		List<OBXBean> obxBeanList = new ArrayList<OBXBean>();
		
		OBXBean obxBean = new OBXBean();
		obxBean.setOccurrenceId("1");
		obxBean.setValueType("CE");
		obxBean.setObservationId("64994-7");
		obxBean.setObservationText("Vaccine funding program eligibility category");
		obxBean.setObservationNCS("LN");
		obxBean.setObservationSubId("1");
		obxBean.setObservationValueIdentifier("V01");
		obxBean.setObservationValueText("VFC eligible - Federally Qualified Health Center Patient (under-insured)");
		obxBean.setObservationValueNCS("HL70064");
		obxBean.setObservationResultStatus("F");
		obxBean.setObservationDateTime("20120701");
		obxBean.setObservMethodId("VXC40");
		obxBean.setObservMethodText("Eligibility captured at the immunization level");
		obxBean.setObservMethodNCS("CDCPHINVS");
		
		obxBeanList.add(obxBean);
		
		OBXBean obxBean2 = new OBXBean();
		obxBean2.setOccurrenceId("2");
		obxBean2.setValueType("TS");
		obxBean2.setObservationId("29768-9");
		obxBean2.setObservationText("vaccine type");
		obxBean2.setObservationNCS("LN");
		obxBean2.setObservationSubId("2");
//		obxBean2.setObservationValueIdentifier("88");
		obxBean2.setObservationValueText("20111025");
		obxBean2.setObservationValueNCS("CVX");
		obxBean2.setObservationResultStatus("F");
		
		obxBeanList.add(obxBean2);
		
		OBXBean obxBean3 = new OBXBean();
		obxBean3.setOccurrenceId("3");
		obxBean3.setValueType("CE");
		obxBean3.setObservationId("30956-7");
		obxBean3.setObservationText("Date vaccine information statement published");
		obxBean3.setObservationNCS("LN");
		obxBean3.setObservationSubId("2");
		obxBean3.setObservationValueIdentifier("85");
		obxBean3.setObservationValueText("20120702");
		obxBean3.setObservationValueNCS("CVX");
		obxBean3.setObservationResultStatus("F");
		
		obxBeanList.add(obxBean3);
		
		
		OBXBean obxBean4 = new OBXBean();
		obxBean4.setOccurrenceId("4");
		obxBean4.setValueType("TS");
		obxBean4.setObservationId("29769-7");
		obxBean4.setObservationText("Date vaccine information statement presented");
		obxBean4.setObservationNCS("LN");
		obxBean4.setObservationSubId("2");
		obxBean4.setObservationValueText("20120702");
		obxBean4.setObservationResultStatus("F");
		
		obxBeanList.add(obxBean4);
		
		return obxBeanList;
	}
}
